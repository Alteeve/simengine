#!/usr/bin/env python3
""" Command line interface for enginecore """
# pylint: disable=C0103

import argparse
import json
import time
import curses
from enginecore.state.assets import Asset
from enginecore.model.graph_reference import GraphReference
import enginecore.model.system_modeler as sm
from enginecore.state.state_managers import StateManager
from enginecore.state.utils import get_asset_type


def manage_state(asset_key, action):
    """ Perform action for a node/asset with a certain key
    Args:
            asset_key (int): supplied asset identifier
            action (func): callable object (lambda/function etc) that identifies action
    """
    gr = GraphReference()
    with gr.get_session() as session:
        
        asset_info = GraphReference.get_asset_and_components(session, asset_key)
        
        asset_type = get_asset_type(asset_info['labels'])
        state_manager = Asset.get_supported_assets()[asset_type].StateManagerCls(asset_info, notify=True)
        
        action(state_manager)

class bcolors:
    """ curses colours """
    OKGREEN = 2
    ERROR = 1


def status_table_format(assets, stdscr=False):
    """ Display status in a table format 
    Args:
            assets (dict): list of assets supported by the system
            stdscr (optional): default window return by initscr(), status_table_format uses print if omitted
    """
    
    # format headers
    headers = ["Asset Key", "Type", "Status", "Children", "Load"]
    row_format = "{:>10}" * (len(headers) + 1)

    headers = row_format.format("", *headers, end='')
    if stdscr: 
        stdscr.addstr(0, 0, headers)
    else:
        print(headers)

    for i, asset_key in enumerate(assets):
        asset = assets[asset_key]
        children = str(asset['children'] if 'children' in asset else "none")
        row = row_format.format(str(i), *[str(asset_key), asset['type'], str(asset['status']), children, "{0:.2f}".format(asset['load'])], end='')

        if stdscr:
            stdscr.addstr(i+1, 0, row, curses.color_pair(bcolors.ERROR if int(asset['status']) == 0 else bcolors.OKGREEN))
        else:
            print(row)

    if stdscr:
        stdscr.refresh()


def get_status(**kwargs):
    """ Retrieve power states of the assets 
    Args:
        **kwargs: Command line options
    """
    
    #### one asset ####
    if kwargs['asset_key'] and kwargs['load']:
        with GraphReference().get_session() as session:
            asset_info = GraphReference.get_asset_and_components(session, int(kwargs['asset_key']))
            asset_type = get_asset_type(asset_info['labels'])
            state_manager = Asset.get_supported_assets()[asset_type].StateManagerCls(asset_info)
            print("{}-{} : {}".format(asset_info['key'], asset_type, state_manager.load))
            return

    elif kwargs['asset_key']:
        asset = StateManager.get_asset_status(int(kwargs['asset_key']))
        print("{key}-{type} : {status}".format(**asset))
        return

    ##### list states #####
    assets = StateManager.get_system_status()

    # json format
    if kwargs['print_as'] == 'json': 
        print(json.dumps(assets, indent=4))

    # monitor state with curses
    elif kwargs['monitor']:
        stdscr = curses.initscr()

        curses.noecho()
        curses.cbreak()

        try:
            curses.start_color()
            curses.use_default_colors()
            for i in range(0, curses.COLORS):
                curses.init_pair(i, i, -1)
            while True:
                status_table_format(assets, stdscr)
                time.sleep(kwargs['watch_rate'])
                assets = StateManager.get_system_status()
        except KeyboardInterrupt:
            pass
        finally:
            curses.echo()
            curses.nocbreak()
            curses.endwin()
            
    # human-readable table
    else:
        status_table_format(assets)

def validate_key(key):
    """Validate asset key"""
    if key > 9999:
        raise argparse.ArgumentTypeError("asset-key must be <= 9999")

def validate_server(kwargs):
    """Server-specific validation"""
    if kwargs['psu_num'] > 1 and (not kwargs['psu_load'] or len(kwargs['psu_load']) != kwargs['psu_num']):
        raise argparse.ArgumentTypeError("psu-load is required for server(-bmc) type when there're multiple PSUs")
    if not kwargs['domain_name']:
        raise argparse.ArgumentTypeError("domain-name is required for server(-bmc) type")
    if not kwargs['power_consumption']:
        raise argparse.ArgumentTypeError("power-consumption is required for server(-bmc) type")
        

################ Define Command line options & arguments

argparser = argparse.ArgumentParser(
    description='Simengine CLI provides a set of management tools for the engine core'
)
subparsers = argparser.add_subparsers()

power_group = subparsers.add_parser('power', help="Control power component of registered asset(s)")

## -> Setup options for state queries
status_group = subparsers.add_parser('status', help="Retrieve status of registered asset(s)")
status_group.add_argument('-k', '--asset-key', type=int)
status_group.add_argument('--print-as', help="Format options")
status_group.add_argument('--monitor', help="Monitor status", action='store_true')
status_group.add_argument('--load', help="Check load", action='store_true')

status_group.add_argument('--watch-rate', nargs='?', 
                          help="Update state every n seconds, defaults to 1", default=1, type=int)


## -> Setup options for oid queries
# oid_group = subparsers.add_parser('oid', help="Manage OIDs")

## -> Setup options for snapshot commands
# snapshot_group = subparsers.add_parser('snapshot', help="Manage snapshots of the assets' states")

## -> Setup options for asset management commands

asset_group = subparsers.add_parser('model', help="Manage system model: create new/update existing asset etc.")
subparsers = asset_group.add_subparsers()
create_asset_group = subparsers.add_parser('create', help="Create new asset")

# detach & delete an asset by key
delete_asset_action = subparsers.add_parser('delete', help="Remove individual asset by key")
delete_asset_action.add_argument('-k', '--asset-key', type=int, required=True)

# drop entire system topology
drop_system_action = subparsers.add_parser('drop', help="Delete/drop all the system components")

# link 2 assets together
power_asset_action = subparsers.add_parser('power-link', help="Create a power link between 2 assets")
power_asset_action.add_argument(
    '-s', '--source-key', type=int, required=True, help="Key of an asset that POWERS dest. asset"
)
power_asset_action.add_argument('-d', '--dest-key', type=int, required=True, help="Key of an powered by the source-key")

#################################
## 'Create new asset' subgroup ##

## > Group some args < ##

# parent will contain args shared by all the asset types
create_asset_parent = argparse.ArgumentParser(add_help=False)
create_asset_parent.add_argument(
    '-k', '--asset-key', type=int, required=True, help="Unique asset key (must be <= 9999)"
)
create_asset_parent.add_argument('--on-delay', type=int, help="Power on delay in ms", default=-1)
create_asset_parent.add_argument('--off-delay', type=int, help="Power on delay in ms", default=-1)
create_asset_parent.add_argument('-n', '--name', help="Name displayed on the UI")

# snmp group parent will contain snmp-specific args
create_snmp_parent = argparse.ArgumentParser(add_help=False)
create_snmp_parent.add_argument('--host', type=str, default='localhost', help="SNMP interface host")
create_snmp_parent.add_argument('--snmp_preset', type=str, help="Vendor-specific asset configurations")

# server group 
create_server_parent = argparse.ArgumentParser(add_help=False)
create_server_parent.add_argument('--domain-name', help="VM domain name")

# power consuming assets group
create_power_parent = argparse.ArgumentParser(add_help=False)
create_power_parent.add_argument('--power-source', type=int, default=120)
create_power_parent.add_argument('--power-consumption', type=int, help="Power consumption in Watts")

## > Add type-specific args < ##

create_subp = create_asset_group.add_subparsers()

## OUTLET
create_outlet_action = create_subp.add_parser(
    'outlet', 
    help="Create a Simple outlet asset", 
    parents=[create_asset_parent]
)

## PDU
create_pdu_action = create_subp.add_parser(
    'pdu', 
    help="Create PDU asset", 
    parents=[create_asset_parent, create_snmp_parent]
)

## UPS
create_ups_action = create_subp.add_parser(
    'ups', 
    help="Create UPS asset", 
    parents=[create_asset_parent, create_snmp_parent]
)

create_ups_action.add_argument('--power-source', help="Asset Voltage", type=int, default=120)
create_ups_action.add_argument(
    '--power-consumption', 
    type=int, 
    help="Power consumption in Watts (how much UPS draws when not powering anything)", 
    default=24
)

## SERVER
create_server_action = create_subp.add_parser(
    'server', 
    help="Create a server asset (VM)", 
    parents=[create_asset_parent, create_server_parent, create_power_parent]
)

## SERVER-BMC
create_server_bmc_action = create_subp.add_parser(
    'server-bmc', 
    help="Create a server asset (VM) that supports IPMI interface", 
    parents=[create_asset_parent, create_server_parent, create_power_parent]
)

create_server_bmc_action.add_argument('--user', type=str, default='ipmiusr', help="BMC-enabled server: IPMI admin user")
create_server_bmc_action.add_argument(
    '--password', 
    type=str, 
    default='test',
    help="BMC-enabled server: IPMI user password"
)
create_server_bmc_action.add_argument('--port', type=int, default=9001, help="IPMI interface port")
create_server_bmc_action.add_argument(
    '--vmport', type=int, default=9002, help="IPMI serial VM inteface for channel 15 (the system interface)"
)

create_server_bmc_action.add_argument('--psu-num', type=int, default=1, help="Number of PSUs installed in the server")
create_server_bmc_action.add_argument(
    '--psu-load', 
    nargs='+',
    type=float,
    help="""How much power PSU(s) draw (the downstream power is multiplied by the value, e.g. 
    for 2 PSUs if '--psu-load 0.5 0.5', load is divivided equally) \n"""
)

## STATIC 
create_static_action = create_subp.add_parser(
    'static', 
    help="Add static (dummy) asset", 
    parents=[create_asset_parent, create_power_parent]
)

create_static_action.add_argument('--img-url', help="URL of the image displayed on the frontend")

### Configure / Update asset properties

update_actions = []

configure_asset_parent = argparse.ArgumentParser(add_help=False)
configure_asset_parent.add_argument(
    '-k', '--asset-key', type=int, required=True, help="Key of the asset to be updated"
)
configure_asset_parent.add_argument('--on-delay', type=int, help="Power on delay in ms")
configure_asset_parent.add_argument('--off-delay', type=int, help="Power on delay in ms")
configure_asset_parent.add_argument('-n', '--name', help="Name displayed on the UI")

# snmp group parent will contain snmp-specific args
configure_snmp_parent = argparse.ArgumentParser(add_help=False)
configure_snmp_parent.add_argument('--host', type=str, default='localhost', help="SNMP interface host")
configure_snmp_parent.add_argument('--snmp_preset', type=str, help="Vendor-specific asset configurations")

# server group 
configure_server_parent = argparse.ArgumentParser(add_help=False)
configure_server_parent.add_argument('--domain-name', help="VM domain name")

# power consuming assets group
configure_power_parent = argparse.ArgumentParser(add_help=False)
configure_power_parent.add_argument('--power-source', type=int, default=120)
configure_power_parent.add_argument('--power-consumption', type=int, help="Power consumption in Watts")


# configure existing asset
update_asset_group = subparsers.add_parser('update', help="Update Asset properties")

update_subp = update_asset_group.add_subparsers()

## OUTLET
update_outlet_action = update_subp.add_parser(
    'outlet', 
    help="Update outlet properties", 
    parents=[configure_asset_parent]
)

## PDU
update_pdu_action = update_subp.add_parser(
    'pdu', 
    help="Update PDU properties", 
    parents=[configure_asset_parent, configure_snmp_parent]
)

## UPS
update_ups_action = update_subp.add_parser(
    'ups', 
    help="Update UPS properties", 
    parents=[configure_asset_parent, configure_snmp_parent]
)

## Server
update_server_action = update_subp.add_parser(
    'server', 
    help="Update Server properties", 
    parents=[configure_asset_parent, configure_server_parent, configure_power_parent]
)

## Server
update_serverbmc_action = update_subp.add_parser(
    'server-bmc', 
    help="Update Server-With BMC properties", 
    parents=[configure_asset_parent, configure_server_parent, configure_power_parent]
)

## Static
update_static_action = update_subp.add_parser(
    'static', 
    help="Update Static Asset properties", 
    parents=[configure_asset_parent, configure_power_parent]
)

update_actions.append(update_outlet_action)
update_actions.append(update_pdu_action)
update_actions.append(update_ups_action)
update_actions.append(update_server_action)
update_actions.append(update_serverbmc_action)
update_actions.append(update_static_action)

###################################
## Assets' ower control subgroup ##

subparsers = power_group.add_subparsers()
power_up_action = subparsers.add_parser('up', help="Power up a particular component/asset")
power_up_action.add_argument('-k', '--asset-key', type=int, required=True)

power_down_action = subparsers.add_parser('down', help="Power down a particular component/asset")
power_down_action.add_argument('-k', '--asset-key', type=int, required=True)
power_down_action.add_argument(
    '--hard', 
    help="Enable abrupt poweroff instead of shutdown",
    dest='hard', 
    action='store_true'
)


############ Callbacks for actions

status_group.set_defaults(func=lambda args: get_status(**args))

# oid_group.set_defaults(func=lambda _: print('Not Implemented Yet'))
# snapshot_group.set_defaults(func=lambda _: print('Not Implemented Yet'))

## asset_group callbacks
create_outlet_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_outlet(args['asset_key'], args)
)

create_pdu_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_pdu(args['asset_key'], args)
)

create_ups_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_ups(args['asset_key'], args)
)

create_server_action.set_defaults(
    validate=lambda args: [validate_key(args['asset_key']), validate_server(args)],
    func=lambda args: sm.create_server(args['asset_key'], args)
)

create_server_bmc_action.set_defaults(
    validate=lambda args: [validate_key(args['asset_key']), validate_server(args)],
    func=lambda args: sm.create_server(args['asset_key'], args, server_variation=sm.ServerVariations.ServerWithBMC)
)

create_static_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_static(args['asset_key'], args)
)


for action in update_actions:
    action.set_defaults(func=lambda args: sm.configure_asset(args['asset_key'], args))

delete_asset_action.set_defaults(
    func=lambda args: sm.delete_asset(args['asset_key'])
)

power_asset_action.set_defaults(
    func=lambda args: sm.link_assets(args['source_key'], args['dest_key'])
)

drop_system_action.set_defaults(func=lambda args: sm.drop_model())

## power_group callbacks
power_up_action.set_defaults(
    func=lambda args: manage_state(args['asset_key'], lambda a: a.power_up())
)

power_down_action.set_defaults(
    hard=False,
    func=lambda args: manage_state(args['asset_key'], lambda a: a.power_off() if args['hard'] else a.shut_down())
)

try:
    options = argparser.parse_args()
    # call callbacks
    if hasattr(options, 'validate'):
        options.validate(vars(options))

    options.func(vars(options))

except AttributeError:
    argparser.print_help()
except argparse.ArgumentTypeError as e:
    print(e)
