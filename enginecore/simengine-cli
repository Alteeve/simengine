#!/usr/bin/python3
""" Command line interface for enginecore """
# pylint: disable=C0103

import argparse
import json
import time
import curses
from enginecore.state.assets import Asset
import enginecore.model.system_modeler as sm
from enginecore.state.state_managers import StateManager


def manage_state(asset_key, mng_action):
    """ Perform action for a node/asset with a certain key
    Args:
        asset_key (int): supplied asset identifier
        mng_action (func): callable object (lambda/function etc) that identifies action
    """
    state_manager = Asset.get_state_manager_by_key(asset_key, notify=True)
    mng_action(state_manager)

class bcolors:
    """ curses colours """
    OKGREEN = 2
    ERROR = 1


def status_table_format(assets, stdscr=False):
    """ Display status in a table format 
    Args:
        assets (dict): list of assets supported by the system
        stdscr (optional): default window return by initscr(), status_table_format uses print if omitted
    """
    
    # format headers
    headers = ["Asset Key", "Type", "Status", "Children", "Load"]
    row_format = "{:>10}" * (len(headers) + 1)

    headers = row_format.format("", *headers, end='')
    if stdscr: 
        stdscr.addstr(0, 0, headers)
    else:
        print(headers)

    for i, asset_key in enumerate(assets):
        asset = assets[asset_key]
        children = str(asset['children'] if 'children' in asset else "none")
        row = row_format.format(
            str(i), 
            *[str(asset_key), asset['type'], str(asset['status']), children, "{0:.2f}".format(asset['load'])], 
            end=''
        )

        if stdscr:
            stdscr.addstr(
                i+1, 0, row, curses.color_pair(bcolors.ERROR if int(asset['status']) == 0 else bcolors.OKGREEN)
            )
        else:
            print(row)

    if stdscr:
        stdscr.refresh()


def get_status(**kwargs):
    """ Retrieve power states of the assets 
    Args:
        **kwargs: Command line options
    """
    
    #### one asset ####
    if kwargs['asset_key'] and kwargs['load']:
    
        state_manager = Asset.get_state_manager_by_key(kwargs['asset_key'])

        if kwargs['value_only']:
            print(state_manager.load)
        else:
            print("{}-{} : {}".format(state_manager.key, state_manager.asset_type, state_manager.load))
        return
    elif kwargs['asset_key'] and kwargs['agent']:
        state_manager = Asset.get_state_manager_by_key(kwargs['asset_key'])
        agent_info = state_manager.agent
        if agent_info:
            msg = "running" if agent_info[1] else "not running"
            if kwargs['value_only']:
                print(int(agent_info[1]))
            else:
                print("{}-{} : pid[{}] is {}".format(state_manager.key, state_manager.asset_type, agent_info[0], msg))
        else:
            print("{}-{} is not running any agents!".format(state_manager.key, state_manager.asset_type))

        return
    elif kwargs['asset_key']:
        state_manager = Asset.get_state_manager_by_key(kwargs['asset_key'])
        if kwargs['value_only']:
            print(state_manager.status)
        else:
            print("{}-{} : {}".format(state_manager.key, state_manager.asset_type, state_manager.status))
        return

    ##### list states #####
    assets = StateManager.get_system_status()

    # json format
    if kwargs['json']: 
        print(json.dumps(assets, indent=4))

    # monitor state with curses
    elif kwargs['monitor']:
        stdscr = curses.initscr()

        curses.noecho()
        curses.cbreak()

        try:
            curses.start_color()
            curses.use_default_colors()
            for i in range(0, curses.COLORS):
                curses.init_pair(i, i, -1)
            while True:
                status_table_format(assets, stdscr)
                time.sleep(kwargs['watch_rate'])
                assets = StateManager.get_system_status()
        except KeyboardInterrupt:
            pass
        finally:
            curses.echo()
            curses.nocbreak()
            curses.endwin()
            
    # human-readable table
    else:
        status_table_format(assets)

def configure_battery(key, kwargs):
    """Udpate runtime battery status"""
    if kwargs['drain_speed'] is not None:
        state_manager = Asset.get_state_manager_by_key(key, notify=True)
        state_manager.set_drain_speed_factor(kwargs['drain_speed'])
    if kwargs['charge_speed'] is not None:
        state_manager = Asset.get_state_manager_by_key(key, notify=True)
        state_manager.set_charge_speed_factor(kwargs['charge_speed'])
    
def handle_link(kwargs):
    """Power connections"""
    if kwargs['remove']:
        sm.remove_link(kwargs['source_key'], kwargs['dest_key'])
    else:
        sm.link_assets(kwargs['source_key'], kwargs['dest_key'])
            

def validate_key(key):
    """Validate asset key"""
    if key > 9999:
        raise argparse.ArgumentTypeError("asset-key must be <= 9999")

def validate_server(kwargs):
    """Server-specific validation"""
    if kwargs['psu_num'] > 1 and (not kwargs['psu_load'] or len(kwargs['psu_load']) != kwargs['psu_num']):
        raise argparse.ArgumentTypeError("psu-load is required for server(-bmc) type when there're multiple PSUs")
    if not kwargs['domain_name']:
        raise argparse.ArgumentTypeError("domain-name is required for server(-bmc) type")
    if not kwargs['power_consumption']:
        raise argparse.ArgumentTypeError("power-consumption is required for server(-bmc) type")
        

################ Define Command line options & arguments

argparser = argparse.ArgumentParser(
    description='Simengine CLI provides a set of management tools for the engine core'
)
subparsers = argparser.add_subparsers()
argparser.add_argument('--version', action='version', version='%(prog)s 2.0')

power_group = subparsers.add_parser('power', help="Control power component of registered asset(s)")

## -> Setup options for state queries
status_group = subparsers.add_parser('status', help="Retrieve status of registered asset(s)")
status_group.add_argument('-k', '--asset-key', help="Get status of one asset (by key) ", type=int)
status_group.add_argument('--json', help="Format as .json", action='store_true')
status_group.add_argument('--monitor', help="Monitor status", action='store_true')
status_group.add_argument('--load', help="Get load for the specified asset (key must be provided)", action='store_true')
status_group.add_argument(
    '--agent', 
    help="Get information about simulator agent (SNMP/IPMI, key must be provided)",
    action='store_true'
)

status_group.add_argument('--value-only', help="Return value only", action='store_true')


status_group.add_argument('--watch-rate', nargs='?', 
                          help="Update state every n seconds, defaults to 1", default=1, type=int)


## -> Setup options for oid queries
# oid_group = subparsers.add_parser('oid', help="Manage OIDs")

## -> Setup options for snapshot commands
# snapshot_group = subparsers.add_parser('snapshot', help="Manage snapshots of the assets' states")

## -> Setup options for asset management commands

asset_group = subparsers.add_parser('model', help="Manage system model: create new/update existing asset etc.")
model_subp = asset_group.add_subparsers()
create_asset_group = model_subp.add_parser('create', help="Create new asset")

reload_asset_action = model_subp.add_parser(
    'reload', 
    help="Reload the system topology (notify daemon of model changes)"
)

# detach & delete an asset by key
delete_asset_action = model_subp.add_parser('delete', help="Remove individual asset by key")
delete_asset_action.add_argument('-k', '--asset-key', type=int, required=True)

# drop entire system topology
drop_system_action = model_subp.add_parser('drop', help="Delete/drop all the system components")

# link 2 assets together
power_asset_action = model_subp.add_parser('power-link', help="Create/Delete a power link between 2 assets")
power_asset_action.add_argument(
    '-s', '--source-key', type=int, required=True, help="Key of an asset that POWERS dest. asset"
)
power_asset_action.add_argument('-d', '--dest-key', type=int, required=True, help="Key of an powered by the source-key")
power_asset_action.add_argument('-r', '--remove', action='store_true', help="Delete power conneciton if exists")

##############################
## state configure subgroup ##
configure_state_group = subparsers.add_parser('configure-state', help="Update runtime state of the assets")
conf_state_subp = configure_state_group.add_subparsers()
conf_ups_action = conf_state_subp.add_parser('ups', help="Update UPS runtime properties")
conf_ups_action.add_argument(
    '-k', '--asset-key', type=int, required=True, help="Unique asset key of the UPS"
)

conf_ups_action.add_argument(
    '-d', '--drain-speed', type=float, help="Update factor of the battery drain (1 sets to regular speed)", 
    choices=range(1, 101), 
    metavar="[1-101]"
)

conf_ups_action.add_argument(
    '-c', '--charge-speed', type=float, help="Update factor of the battery charge (1 sets to regular speed)", 
    choices=range(1, 101), 
    metavar="[1-101]"
)


#################################
## 'Create new asset' subgroup ##

## > Group some args < ##

# parent will contain args shared by all the asset types
create_asset_parent = argparse.ArgumentParser(add_help=False)
create_asset_parent.add_argument(
    '-k', '--asset-key', type=int, required=True, help="Unique asset key (must be <= 9999)"
)
create_asset_parent.add_argument('--on-delay', type=int, help="Power on delay in ms", default=0)
create_asset_parent.add_argument('--off-delay', type=int, help="Power on delay in ms", default=0)
create_asset_parent.add_argument('-n', '--name', help="Name displayed on the UI")

# snmp group parent will contain snmp-specific args
create_snmp_parent = argparse.ArgumentParser(add_help=False)
create_snmp_parent.add_argument('--host', type=str, default='localhost', help="SNMP interface host")
create_snmp_parent.add_argument('--port', type=int, required=True, help="SNMP interface port")
create_snmp_parent.add_argument('--snmp_preset', type=str, help="Vendor-specific asset configurations")

# server group 
create_server_parent = argparse.ArgumentParser(add_help=False)
create_server_parent.add_argument('--domain-name', help="VM domain name")

# power consuming assets group
create_power_parent = argparse.ArgumentParser(add_help=False)
create_power_parent.add_argument('--power-source', type=int, default=120)
create_power_parent.add_argument('--power-consumption', required=True, type=int, help="Power consumption in Watts")

## > Add type-specific args < ##

create_subp = create_asset_group.add_subparsers()

## OUTLET
create_outlet_action = create_subp.add_parser(
    'outlet', 
    help="Create a Simple outlet asset", 
    parents=[create_asset_parent]
)

## PDU
create_pdu_action = create_subp.add_parser(
    'pdu', 
    help="Create PDU asset", 
    parents=[create_asset_parent, create_snmp_parent]
)

## UPS
create_ups_action = create_subp.add_parser(
    'ups', 
    help="Create UPS asset", 
    parents=[create_asset_parent, create_snmp_parent]
)

create_ups_action.add_argument('--power-source', help="Asset Voltage", type=int, default=120)
create_ups_action.add_argument(
    '--power-consumption', 
    type=int, 
    help="Power consumption in Watts (how much UPS draws when not powering anything)", 
    default=24
)

## SERVER
create_server_action = create_subp.add_parser(
    'server', 
    help="Create a server asset (VM)", 
    parents=[create_asset_parent, create_server_parent, create_power_parent]
)

create_server_action.add_argument('--psu-num', type=int, default=1, help="Number of PSUs installed in the server")
create_server_action.add_argument(
    '--psu-load', 
    nargs='+',
    type=float,
    help="""PSU(s) load distribution (the downstream power is multiplied by the value, e.g. 
    for 2 PSUs if '--psu-load 0.5 0.5', load is divivided equally) \n"""
)

create_server_action.add_argument(
    '--psu-power-consumption', 
    nargs='+',
    type=int,
    default=6,
    help="""Power consumption of idle PSU \n"""
)

create_server_action.add_argument(
    '--psu-power-source', 
    nargs='+',
    type=int,
    default=120,
    help="""PSU Voltage \n"""
)

## SERVER-BMC
create_server_bmc_action = create_subp.add_parser(
    'server-bmc', 
    help="Create a server asset (VM) that supports IPMI interface", 
    parents=[create_asset_parent, create_server_parent, create_power_parent]
)

create_server_bmc_action.add_argument('--user', type=str, default='ipmiusr', help="BMC-enabled server: IPMI admin user")
create_server_bmc_action.add_argument(
    '--password', 
    type=str, 
    default='test',
    help="BMC-enabled server: IPMI user password"
)
create_server_bmc_action.add_argument('--port', type=int, default=9001, help="IPMI interface port")
create_server_bmc_action.add_argument(
    '--vmport', type=int, default=9002, help="IPMI serial VM inteface for channel 15 (the system interface)"
)

create_server_bmc_action.add_argument('--psu-num', type=int, default=1, help="Number of PSUs installed in the server")
create_server_bmc_action.add_argument(
    '--psu-load', 
    nargs='+',
    type=float,
    help="""PSU(s) load distribution (the downstream power is multiplied by the value, e.g. 
    for 2 PSUs if '--psu-load 0.5 0.5', load is divivided equally) \n"""
)

create_server_bmc_action.add_argument(
    '--psu-power-consumption', 
    nargs='+',
    type=int,
    default=6,
    help="""Power consumption of idle PSU \n"""
)

create_server_bmc_action.add_argument(
    '--psu-power-source', 
    nargs='+',
    type=int,
    default=120,
    help="""PSU Voltage \n"""
)

## STATIC 
create_static_action = create_subp.add_parser(
    'static', 
    help="Add static (dummy) asset", 
    parents=[create_asset_parent, create_power_parent]
)

create_static_action.add_argument('--img-url', help="URL of the image displayed on the frontend")

### Configure / Update asset properties

update_actions = []

update_asset_parent = argparse.ArgumentParser(add_help=False)
update_asset_parent.add_argument(
    '-k', '--asset-key', type=int, required=True, help="Key of the asset to be updated"
)
update_asset_parent.add_argument('--on-delay', type=int, help="Power on delay in ms")
update_asset_parent.add_argument('--off-delay', type=int, help="Power on delay in ms")
update_asset_parent.add_argument('-n', '--name', help="Name displayed on the UI")

# snmp group parent will contain snmp-specific args
update_snmp_parent = argparse.ArgumentParser(add_help=False)
update_snmp_parent.add_argument('--host', type=str, help="SNMP interface host")
update_snmp_parent.add_argument('--port', type=int, help="SNMP interface port")
# update_snmp_parent.add_argument('--snmp-preset', type=str, help="Vendor-specific asset configurations")

# server group 
update_server_parent = argparse.ArgumentParser(add_help=False)
update_server_parent.add_argument('--domain-name', help="VM domain name")

# power consuming assets group
update_power_parent = argparse.ArgumentParser(add_help=False)
update_power_parent.add_argument('--power-source', type=int)
update_power_parent.add_argument('--power-consumption', type=int, help="Power consumption in Watts")


# update existing asset
update_asset_group = model_subp.add_parser('update', help="Update Asset properties")

update_subp = update_asset_group.add_subparsers()

## OUTLET
update_outlet_action = update_subp.add_parser(
    'outlet', 
    help="Update outlet properties", 
    parents=[update_asset_parent]
)

## PDU
update_pdu_action = update_subp.add_parser(
    'pdu', 
    help="Update PDU properties", 
    parents=[update_asset_parent, update_snmp_parent]
)

## UPS
update_ups_action = update_subp.add_parser(
    'ups', 
    help="Update UPS properties", 
    parents=[update_asset_parent, update_snmp_parent]
)

update_ups_action.add_argument(
    '--full-recharge-time', 
    type=float, 
    help="Update recharge time for UPS, time taken (hours) to recharge fully depleted battery",
    dest="full_recharge_time"
)

update_ups_action.add_argument(
    '--min-power-bat', 
    type=int, 
    help="Minimum battery level required before UPS output is powered on (where 1=0.1 percent)",
    dest="min_power_on_battery_level",
    choices=range(0, 1001),
    metavar="[0-1001]"
)

update_ups_action.add_argument(
    '--power-capacity', 
    type=int, 
    help="Output power capacity of the UPS",
    dest="output_power_capacity",
    choices=range(1, 5000),
    metavar="[1-5000]"  
)

update_ups_action.add_argument(
    '--runtime-graph',  
    help="Sampled runtime graph for the UPS in .JSON key-value format { wattage1: minutes, wattage2: minutes } ",
    dest="runtime"
)


## Server
update_server_action = update_subp.add_parser(
    'server', 
    help="Update Server properties", 
    parents=[update_asset_parent, update_server_parent, update_power_parent]
)

## Server BMC
update_server_bmc_action = update_subp.add_parser(
    'server-bmc', 
    help="Update Server-With BMC properties", 
    parents=[update_asset_parent, update_server_parent, update_power_parent]
)


update_server_bmc_action.add_argument('--sensor-def', type=str, help="JSON file containing sensor definitions")
update_server_bmc_action.add_argument('--user', type=str, help="BMC-enabled server: IPMI admin user")
update_server_bmc_action.add_argument('--password', type=str, help="BMC-enabled server: IPMI user password")
update_server_bmc_action.add_argument('--port', type=int, help="IPMI interface port")
update_server_bmc_action.add_argument(
    '--vmport', 
    type=int, 
    help="IPMI serial VM inteface for channel 15 (the system interface)"
)

## Static
update_static_action = update_subp.add_parser(
    'static', 
    help="Update Static Asset properties", 
    parents=[update_asset_parent, update_power_parent]
)

update_static_action.add_argument('--img-url', help="URL of the image displayed on the frontend")

update_actions.append(update_outlet_action)
update_actions.append(update_pdu_action)
update_actions.append(update_ups_action)
update_actions.append(update_server_action)
update_actions.append(update_server_bmc_action)
update_actions.append(update_static_action)

###################################
## Assets' power control subgroup ##

subparsers = power_group.add_subparsers()
power_up_action = subparsers.add_parser('up', help="Power up a particular component/asset")
power_up_action.add_argument('-k', '--asset-key', type=int, required=True)

power_down_action = subparsers.add_parser('down', help="Power down a particular component/asset")
power_down_action.add_argument('-k', '--asset-key', type=int, required=True)
power_down_action.add_argument(
    '--hard', 
    help="Enable abrupt poweroff instead of shutdown",
    dest='hard', 
    action='store_true'
)

power_outage_action = subparsers.add_parser('outage', help="Simulate complete power loss")
power_restore_action = subparsers.add_parser('restore', help="Restore mains power after outage")

############ Callbacks for actions

status_group.set_defaults(func=lambda args: get_status(**args))

conf_ups_action.set_defaults(func=lambda args: configure_battery(args['asset_key'], args))
# snapshot_group.set_defaults(func=lambda _: print('Not Implemented Yet'))

## asset_group callbacks
create_outlet_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_outlet(args['asset_key'], args)
)

create_pdu_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_pdu(args['asset_key'], args)
)

create_ups_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_ups(args['asset_key'], args)
)

create_server_action.set_defaults(
    validate=lambda args: [validate_key(args['asset_key']), validate_server(args)],
    func=lambda args: sm.create_server(args['asset_key'], args)
)

create_server_bmc_action.set_defaults(
    validate=lambda args: [validate_key(args['asset_key']), validate_server(args)],
    func=lambda args: sm.create_server(args['asset_key'], args, server_variation=sm.ServerVariations.ServerWithBMC)
)

create_static_action.set_defaults(
    validate=lambda args: validate_key(args['asset_key']),
    func=lambda args: sm.create_static(args['asset_key'], args)
)


for action in update_actions:
    action.set_defaults(func=lambda args: sm.configure_asset(args['asset_key'], args))

reload_asset_action.set_defaults(
    func=lambda args: StateManager.reload_model() 
)

delete_asset_action.set_defaults(
    func=lambda args: sm.delete_asset(args['asset_key'])
)

power_asset_action.set_defaults(
    func=handle_link
)

power_outage_action.set_defaults(
    func=lambda _: StateManager.power_outage()
)

power_restore_action.set_defaults(
    func=lambda _: StateManager.power_restore()
)


drop_system_action.set_defaults(func=lambda args: sm.drop_model())

## power_group callbacks
power_up_action.set_defaults(
    func=lambda args: manage_state(args['asset_key'], lambda a: a.power_up())
)

power_down_action.set_defaults(
    hard=False,
    func=lambda args: manage_state(args['asset_key'], lambda a: a.power_off() if args['hard'] else a.shut_down())
)

try:
    options = argparser.parse_args()
    
    # call callbacks
    if hasattr(options, 'validate'):
        options.validate(vars(options))
    if hasattr(options, 'func'):
        options.func(vars(options))
    else:
        argparser.print_help()
except AttributeError:
    argparser.print_help()
except argparse.ArgumentTypeError as e:
    print(e)
